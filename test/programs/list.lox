class _null {}
class Pair {
    init(head,tail) {
        this._head = head;
        this._tail = tail;
    }
    head() this._head
    tail() this._tail
}
class List {
    init() {
        this.pair = _null;
    }
    empty() this.pair == _null
    add(item) {
        this.pair = Pair(item, this.clone());
        return this;
    }
    clone() {
        var clone = List();
        clone.pair = this.pair;
        return clone;
    }
    head() this.pair.head()
    tail() this.pair.tail()
    length() this.empty() ? 0 : 1 + this.tail().length()
    get(i) i == 0 ? this.head() : this.tail().get(i - 1)
    fold(fn, init) this.empty() ? init : this.tail().fold(fn, fn(init, this.head()))
    string() this.fold((fun (acc, x) acc == "" ? x : (acc + ", " + x)), "")
    map(fn) this.empty() ? this : fun(){
        var a = fn(this.head());
        var rest = this.tail().map(fn);
        rest.add(a);
        return rest;
    }()
    expand(fn) this.fold(fun (a,b){a.extend(fn(b))}, List())
    extend(a) a.empty() ? this : this.add(a.head()).extend(a.tail())
    reverse() this.fold(fun (acc, x) {
        acc.add(x);
        return acc;
    }, List())
    slice(start, end) this.drop(start).take(end - start)
    drop(i) i == 0 ? this : this.tail().drop(i  - 1)
    take(i) i == 0 ? List() : fun(){
        var rest = this.tail().take(i-1);
        rest.add(this.head());
        return rest;
    }()
}
var l = List();
l.add("jack");
l.add("olga");
l.add("athena");
l.add("reilly");
l.add("kavvada");
l.map(fun (a) a + a).slice(1,3).expand(fun (a) {
    var l = List();
    l.add(a);
    l.add(" - and stuff");
    return l;
}).string();