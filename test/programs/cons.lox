// The symbol of the end of a list
fun null() {}
// creates a pair (a,b)
fun cons(a,b) {
    fun helper(c) {
        if (c) {
            return a;
        }
        return b;
    }
    return helper;
}
// Returns if your list is empty
fun isEmpty(list) {
    return list == null;
}

// A single item list
fun single(a) {
    return cons(a, null);
}
// (1, (2, (3, null)))

fun head(pair) {
    return pair(true);
}
fun tail(pair) {
    return pair(false);
}

fun map(fn, list) {
    if (isEmpty(list)) {
        return list;
    }
    return cons(fn(head(list)), map(fn, tail(list)));
}
fun fold(fn, init, list) {
    fun helper(accumulator, rest) {
        if (isEmpty(rest)) {
            return accumulator;
        }
        return helper(fn(accumulator, head(rest)), tail(rest));
    }
    return helper(init, list);
}
fun join(joiner, list) {
    fun helper(accumulator, value) {
        if (accumulator == "") {
            return value;
        }
        return accumulator + joiner + value;
    }
    return fold(helper, "", list)
}
var jack = "reilly";
var olga = "kavvada";
var athena = "ravvada";
fun double(a) return a + a;
var myList = cons(athena, cons(jack, single(olga)));
var mapped = map(double, myList);
var joined = join(", ", mapped);
joined;