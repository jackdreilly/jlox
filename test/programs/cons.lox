// The symbol of the end of a list
fun null() {}
// creates a pair (a,b)
fun cons(a,b) fun(c) c ? a : b
// Returns if your list is empty
fun isEmpty(list) list == null

// A single item list
fun single(a) cons(a, null)
// (1, (2, (3, null)))

fun head(pair) pair(true)
fun tail(pair) pair(false)

fun map(fn, list) isEmpty(list) ? list : cons(fn(head(list)), map(fn, tail(list)))

fun fold(fn, init, list) {
    var helper = fun (accumulator, rest) isEmpty(rest) ? accumulator : helper(fn(accumulator, head(rest)), tail(rest));
    helper(init, list);
}
fun join(joiner, list) fold(
    fun (accumulator, value)
        {accumulator == ""
            ? value
            : accumulator + joiner + value}
    ,
    "",
    list
)
var jack = "reilly";
var olga = "kavvada";
var athena = "ravvada";
join(
    ", ",
    map(
        fun (a) {a + a},
        cons(athena, cons(jack, single(olga)))
    )
);